# NOTE: This file is auto generated by OpenAPI Generator 7.13.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule PetStore.Api.Store do
  @moduledoc """
  API calls for all endpoints tagged `Store`.
  """

  alias PetStore.Connection
  import PetStore.RequestBuilder

  @doc """
  Delete purchase order by identifier.
  For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.

  ### Parameters

  - `connection` (PetStore.Connection): Connection to server
  - `order_id` (integer()): ID of the order that needs to be deleted
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_order(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_order(connection, order_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/store/order/#{order_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, false},
      {404, false},
      {:default, false}
    ])
  end

  @doc """
  Returns pet inventories by status.
  Returns a map of status codes to quantities.

  ### Parameters

  - `connection` (PetStore.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, %{}}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_inventory(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, %{optional(String.t) => integer()}} | {:error, Tesla.Env.t}
  def get_inventory(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/store/inventory")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {:default, false}
    ])
  end

  @doc """
  Find purchase order by ID.
  For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.

  ### Parameters

  - `connection` (PetStore.Connection): Connection to server
  - `order_id` (integer()): ID of order that needs to be fetched
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PetStore.Model.Order.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_order_by_id(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, PetStore.Model.Order.t} | {:error, Tesla.Env.t}
  def get_order_by_id(connection, order_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/store/order/#{order_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PetStore.Model.Order},
      {400, false},
      {404, false},
      {:default, false}
    ])
  end

  @doc """
  Place an order for a pet.
  Place a new order in the store.

  ### Parameters

  - `connection` (PetStore.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (Order): 

  ### Returns

  - `{:ok, PetStore.Model.Order.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec place_order(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, PetStore.Model.Order.t} | {:error, Tesla.Env.t}
  def place_order(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/store/order")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PetStore.Model.Order},
      {400, false},
      {422, false},
      {:default, false}
    ])
  end
end
