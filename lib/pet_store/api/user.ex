# NOTE: This file is auto generated by OpenAPI Generator 7.13.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule PetStore.Api.User do
  @moduledoc """
  API calls for all endpoints tagged `User`.
  """

  alias PetStore.Connection
  import PetStore.RequestBuilder

  @doc """
  Create user.
  This can only be done by the logged in user.

  ### Parameters

  - `connection` (PetStore.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (User): Created user object

  ### Returns

  - `{:ok, PetStore.Model.User.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_user(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, PetStore.Model.User.t} | {:error, Tesla.Env.t}
  def create_user(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/user")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PetStore.Model.User},
      {:default, false}
    ])
  end

  @doc """
  Creates list of users with given input array.
  Creates list of users with given input array.

  ### Parameters

  - `connection` (PetStore.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` ([PetStore.Model.User.t]): 

  ### Returns

  - `{:ok, PetStore.Model.User.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_users_with_list_input(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, PetStore.Model.User.t} | {:error, Tesla.Env.t}
  def create_users_with_list_input(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/user/createWithList")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PetStore.Model.User},
      {:default, false}
    ])
  end

  @doc """
  Delete user resource.
  This can only be done by the logged in user.

  ### Parameters

  - `connection` (PetStore.Connection): Connection to server
  - `username` (String.t): The name that needs to be deleted
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_user(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_user(connection, username, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/user/#{username}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, false},
      {404, false},
      {:default, false}
    ])
  end

  @doc """
  Get user by user name.
  Get user detail based on username.

  ### Parameters

  - `connection` (PetStore.Connection): Connection to server
  - `username` (String.t): The name that needs to be fetched. Use user1 for testing
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PetStore.Model.User.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_user_by_name(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, PetStore.Model.User.t} | {:error, Tesla.Env.t}
  def get_user_by_name(connection, username, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/user/#{username}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PetStore.Model.User},
      {400, false},
      {404, false},
      {:default, false}
    ])
  end

  @doc """
  Logs user into the system.
  Log into the system.

  ### Parameters

  - `connection` (PetStore.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:username` (String.t): The user name for login
    - `:password` (String.t): The password for login in clear text

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec login_user(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def login_user(connection, opts \\ []) do
    optional_params = %{
      :username => :query,
      :password => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/user/login")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, false},
      {:default, false}
    ])
  end

  @doc """
  Logs out current logged in user session.
  Log user out of the system.

  ### Parameters

  - `connection` (PetStore.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec logout_user(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def logout_user(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/user/logout")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {:default, false}
    ])
  end

  @doc """
  Update user resource.
  This can only be done by the logged in user.

  ### Parameters

  - `connection` (PetStore.Connection): Connection to server
  - `username` (String.t): name that need to be deleted
  - `opts` (keyword): Optional parameters
    - `:body` (User): Update an existent user in the store

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_user(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def update_user(connection, username, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/user/#{username}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, false},
      {404, false},
      {:default, false}
    ])
  end
end
